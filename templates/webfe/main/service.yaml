AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  Prefix:
    Type: String
    Default: "web2cloud-test"
  Landscape:
    Type: String
    Default: "test"
  Tag:
    Type: String
    Default: "9035b0c7"
    #Default: "latest"
  CloudwatchLogsGroup:
    Type: String
    Description: Reference to logs group for ECS cluster apps
  ECSCluster:
    Type: String
    Description: Reference to ECS cluster
  Port80TargetGroup:
    Type: String
    Description: Reference to target group for port 80
  Port443TargetGroup:
    Type: String
    Description: Reference to target group for port 443
  DockerImage:
    Type: String
    Default: "amazon/amazon-ecs-sample"
  PublicAlbAcmCertificate:
    #AllowedPattern: ^$|(arn:aws:acm:)([a-z0-9/:-])*([a-z0-9])$
    Description: '[ Optional ] The AWS Certification Manager certificate ARN for the ALB certificate - this certificate should be created in the region you wish to run the ALB and must reference the WordPress domain name you use below.'
    Type: String
    Default: "arn:aws:acm:us-east-1:187621470568:certificate/6504f5c8-0e04-4032-b0a2-b65deefb9b8e"
  DesiredCapacity:
    Type: Number
    Default: '1'
    Description: Number of instances to launch in your ECS cluster.
  MaxSize:
    Type: Number
    Default: '1'
    Description: Maximum number of instances that can be launched in your ECS cluster.
Conditions:
  SslCertificate:
    !Not [!Equals [ '', !Ref PublicAlbAcmCertificate ] ]
  NotSslCertificate:
    !Equals [ '', !Ref 'PublicAlbAcmCertificate' ]
Resources:
  taskdefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Join ['', [!Ref 'AWS::StackName', -bufe]]
      ContainerDefinitions:
      - Name: "bu-webrouter"
        Cpu: '10'
        Essential: 'true'
        # uncomment the following if we can make the root file system read-only
        #ReadonlyRootFilesystem: 'true'
        # The following is to avoid the catch-22: we don't have an image in our ECR until 
        # the CodePipeline runs and the service has already failed.  We should investigate 
        # having this be our web-router-base Docker image when we have it.
        Image: amazon/amazon-ecs-sample
        #Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${Repository}:${Tag}"
        #Image: 
        #  "Fn::Join": 
        #    - ':' 
        #    -
        #      - "Fn::ImportValue": !Sub "${Prefix}-container-repository-uri"
        #      - "latest"
        Memory: '300'
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: !Ref 'CloudwatchLogsGroup'
            awslogs-region: !Ref 'AWS::Region'
            awslogs-stream-prefix: bufe-buedu
        Environment:
          - Name: LANDSCAPE
            Value: !Ref 'Landscape'
        PortMappings:
          - ContainerPort: 80
          - ContainerPort: 443

  Port443Service:
    Condition: SslCertificate
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref 'ECSCluster'
      DesiredCount: !Ref 'DesiredCapacity'
      LoadBalancers:
      - ContainerName: "bu-webrouter"
        ContainerPort: '443'
        TargetGroupArn: !Ref 'Port443TargetGroup'
      Role: 
        "Fn::ImportValue": !Sub "${Prefix}-container-role"
      ServiceName: !Sub "port443-${Prefix}-service"
      TaskDefinition: !Ref 'taskdefinition'

  Port80Service:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref 'ECSCluster'
      DesiredCount: !Ref 'DesiredCapacity'
      LoadBalancers:
      - ContainerName: "bu-webrouter"
        ContainerPort: '80'
        TargetGroupArn: !Ref 'Port80TargetGroup'
      Role:
        "Fn::ImportValue": !Sub "${Prefix}-container-role"
      ServiceName: !Sub "port80-${Prefix}-service"
      TaskDefinition: !Ref 'taskdefinition'

  Port80ServiceScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 2
      MinCapacity: 1
      #ResourceId: !Ref "Port80Service" 
      ResourceId: !Join
        - /
        - - service
          - !Ref "ECSCluster"
          - !GetAtt "Port80Service.Name"
      RoleARN: 
        "Fn::ImportValue": !Sub "${Prefix}-autoscaling-role-arn" 
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  Port80ServiceScaleOutPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub "port80-scaleout-${AWS::StackName}-policy"
      PolicyType: StepScaling
      ScalingTargetId: !Ref 'Port80ServiceScalingTarget'
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      StepScalingPolicyConfiguration:
        AdjustmentType: ChangeInCapacity
        Cooldown: 60
        MetricAggregationType: Average
        StepAdjustments:
        - MetricIntervalLowerBound: 0
          ScalingAdjustment: 2

  # basing this work on https://github.com/pahud/ecs-cfn-refarch/blob/master/cloudformation/service.yml
  #Port80ServiceScalingDownPolicy:
  #  Type: AWS::ApplicationAutoScaling::ScalingPolicy
  #  Properties:
  #    PolicyName: !Sub "port80-scaling-down-policy-${AWS::StackName}"
  #    PolicyType: StepScaling
  #    ScalingTargetId: !Ref 'Port80ServiceScalingTarget'
  #    ScalableDimension: ecs:service:DesiredCount
  #    ServiceNamespace: ecs
  #    StepScalingPolicyConfiguration:
  #      AdjustmentType: ChangeInCapacity
  #      Cooldown: 60
  #      MetricAggregationType: Average
  #      StepAdjustments:
  #      - MetricIntervalLowerBound: 0
  #        ScalingAdjustment: "-1"
  #      - MetricIntervalUpperBound: 0
  #        ScalingAdjustment: "-1"


  #Port80ScalingDownCPUAlarm:
  #  Type: AWS::CloudWatch::Alarm
  #  Properties:
  #    AlarmDescription: port 80 CPU scaling down
  #    AlarmActions: [!Ref 'Port80ServiceScalingDownPolicy']
  #    ComparisonOperator: LessThanThreshold
  #    Dimensions:
  #    - Name: ServiceName
  #      Value: !GetAtt 'Port80Service.Name'
  #    - Name: ClusterName
  #      Value: !Ref "ECSCluster"
  #    EvaluationPeriods: '2'
  #    MetricName: !Sub "${AWS::StackName}-port80-cpu-alarm"
  #    Namespace: AWS/ECS
  #    Period: '300'
  #    Statistic: Average
  #    Threshold: '20'

  Port80CPUScaleOutAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: !Sub "port80-cpuout-${Prefix}-alarm"
      AlarmActions: 
        - !Ref 'Port80ServiceScaleOutPolicy'
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
      - Name: ServiceName
        Value: !GetAtt Port80Service.Name
      - Name: ClusterName
        Value: !Ref ECSCluster
      EvaluationPeriods: '1'
      MetricName: !Sub "port80-cpuout-${Prefix}-metric"
      Namespace: AWS/ECS
      Period: '60'
      Statistic: Average
      Threshold: '80'

Outputs:
  Port80Service:
    Value: !Ref 'Port80Service'
    Export:
      Name: !Sub "${Prefix}-port80service-ref"
  Port443Service:
    Value: !Ref 'Port443Service'
    Export:
      Name: !Sub "${Prefix}-port443service-ref"
